// supabase/functions/generate-content/index.ts
import { serve } from 'https://deno.land/std@0.208.0/http/server.ts'; // Recomendo usar uma vers√£o mais recente se poss√≠vel
import { createClient, SupabaseClient } from 'https://esm.sh/@supabase/supabase-js@2'; // Confirme a vers√£o do seu cliente Supabase JS
import { OpenAI } from "https://deno.land/x/openai/mod.ts"; // Confirme a vers√£o/alternativa Deno

// --- 1. Defini√ß√µes Centralizadas de Prompts ---

// REGRAS DO UNIVERSO "O MUNDO DE DOM" - ESSENCIAL PARA CONSIST√äNCIA
const DOM_UNIVERSE_RULES = `
Voc√™ √© um assistente de IA altamente especializado na cria√ß√£o de conte√∫do para a s√©rie de anima√ß√£o infantil "O Mundo de Dom".
Siga TODAS as regras do universo estritamente:
- Tom Geral: Sonhador, leve, positivo, m√°gico, encorajador e totalmente apropriado para crian√ßas em idade pr√©-escolar (3-6 anos). Evite temas complexos, assustadores ou negativos.
- Narra√ß√£o: Sempre em terceira pessoa, com um tom de voz gentil, caloroso e um pouco m√°gico, como um contador de hist√≥rias experiente.
- Estilo de Linguagem: Use frases curtas e simples, vocabul√°rio acess√≠vel para crian√ßas pequenas. Seja descritivo de forma visual e sensorial.
- Estilo Visual (para Prompts): O estilo visual padr√£o √© 2D cartoon desenhado √† m√£o, com cores vibrantes (exceto quando especificado), contornos suaves, propor√ß√µes simples e personagens amig√°veis e expressivos. Pense em anima√ß√µes pr√©-escolares modernas.
- Personagens Principais:
    - Dom: Menino (aprox. 5-6 anos) extremamente curioso, imaginativo, otimista e corajoso. Adora explorar e aprender.
    - Remy: Criatura alien√≠gena inicialmente rosada, flutuante, sem forma definida, com grandes olhos azuis expressivos. Comunica-se por sons ("Blup!") e transforma√ß√µes. √â curioso, um pouco t√≠mido no in√≠cio, mas muito leal e √∫til. Na Terra, assume a forma de um gato branco com listras laranja e os mesmos olhos azuis.
    - Professora: Adulta gentil, paciente e encorajadora. Fomenta a curiosidade de Dom.
    - M√£e/Pai (Vozes): Vozes calorosas e carinhosas fora de cena.
- Consist√™ncia: Mantenha as caracter√≠sticas dos personagens e os elementos do universo consistentes ao longo de todo o conte√∫do gerado.
`;

// TEMPLATES DETALHADOS PARA CADA TIPO DE M√ìDULO
const MODULE_TEMPLATES: Record<string, string> = {
  'roteiro_completo': `
Sua tarefa √© converter o roteiro base fornecido em um Roteiro Completo de Epis√≥dio para 'O Mundo de Dom'.
Siga ESTRITAMENTE O SEGUINTE FORMATO:
1.  **Cabe√ßalho de Cena:** Use "[Emoji Relevante] CENA X ‚Äì NOME DA CENA EM MAI√öSCULAS". Tente usar um emoji que corresponda ao local/contexto da cena (ex: üéì para escola, üè† para casa, üöÄ para espa√ßo). Deve haver uma linha em branco ANTES de cada cabe√ßalho de cena.
2.  **Narra√ß√£o:** Escreva "NARRADOR" em mai√∫sculas numa linha pr√≥pria. Na linha seguinte, comece o texto da narra√ß√£o.
3.  **Di√°logo:**
    * Escreva "NOME_DO_PERSONAGEM" em mai√∫sculas numa linha pr√≥pria.
    * Se houver uma indica√ß√£o de a√ß√£o ou tom, escreva-a entre par√™nteses "( )" na linha IMEDIATAMENTE ABAIXO do nome do personagem (ex: "(sorrindo)").
    * Na linha seguinte √† indica√ß√£o de a√ß√£o/tom (ou diretamente abaixo do nome do personagem se n√£o houver indica√ß√£o), comece o texto do di√°logo. Use "‚Äî" (travess√£o) no in√≠cio da fala, se apropriado.
4.  **A√ß√µes/Sons:** Descri√ß√µes de a√ß√µes importantes e sons devem ser incorporadas na narra√ß√£o (ex: "Som de foguete subindo suavemente.").
5.  **Espa√ßamento:** Mantenha linhas em branco entre blocos (cena, narrador, personagem/di√°logo) para clareza.
Adapte TODO o roteiro base para este formato detalhado.`,

  'roteiro_cena': `
Sua tarefa √© converter o roteiro base em um Roteiro de Cenas (Shot List) para 'O Mundo de Dom', formatado para gera√ß√£o de imagens por IA.
Siga ESTRITAMENTE O SEGUINTE FORMATO:
1.  **T√≠tulo:** Comece com "PARTE 1 ‚Äì ROTEIRO DE CENAS (para gera√ß√£o de imagens com IA)".
2.  **Introdu√ß√£o:** Inclua o par√°grafo: "Cada cena est√° pensada em blocos visuais de 3 a 5 segundos (microcenas), para facilitar a produ√ß√£o no MidJourney e posterior anima√ß√£o com Kling, After Effects etc.".
3.  **Separador de Cena Principal:** Use o caractere "üîπ" numa linha pr√≥pria para separar os blocos de cada CENA principal.
4.  **Cabe√ßalho de Cena:** Abaixo do separador "üîπ", escreva "CENA X ‚Äì Nome da Cena em Mai√∫sculas".
5.  **Microcenas:** Liste as microcenas numeradas sequencialmente dentro de cada cena principal (ex: "1.1", "1.2", "2.1", etc.).
6.  **Descri√ß√£o da Microcena:** Ap√≥s o n√∫mero (ex: "1.1 "), escreva uma descri√ß√£o MUITO CONCISA da A√á√ÉO VISUAL principal dessa microcena (m√°x 15 palavras). Foque no que deve ser visto (personagens, objetos, movimento, close-ups). Evite di√°logos, use apenas descri√ß√µes visuais. Exemplo: "1.1 Dom desenha estrelas coloridas no caderno (close na m√£o e caderno)".
Adapte TODO o roteiro base para esta estrutura de shot list visual.`,

  'prompt_visual': `
Sua tarefa √© analisar o roteiro base e gerar Prompts de Cria√ß√£o EM INGL√äS para personagens e cen√°rios chave do epis√≥dio 'O Mundo de Dom', formatados para IA de imagem (estilo MidJourney).
Siga ESTRITAMENTE O SEGUINTE FORMATO:
1.  **Categorias:** Organize os prompts em categorias l√≥gicas (ex: "Characters", "Scenes"). Use um emoji opcional seguido pelo NOME DA CATEGORIA EM MAI√öSCULAS (ex: "üßí CHARACTERS", "üåç SCENES"). Use uma linha em branco entre categorias.
2.  **Itens dentro da Categoria:** Para cada item a ser gerado:
    * Use um emoji opcional relevante seguido pelo Nome do Item em Ingl√™s (ex: "üè´ Preschool Classroom").
    * Na linha seguinte, escreva EXATAMENTE "Prompt (EN):".
    * Na linha seguinte, comece o texto do prompt DETALHADO em INGL√äS. Use uma linha em branco antes do pr√≥ximo item.
3.  **Conte√∫do do Prompt (EN):** O prompt em ingl√™s DEVE incluir: "2D hand-drawn cartoon style, simple shapes, soft outlines, vibrant colors, for preschool children animation (like 'Bluey' or 'Puffin Rock')". Adicione detalhes espec√≠ficos do item (apar√™ncia, cores, roupas, humor, ambiente, ilumina√ß√£o) conforme descrito no roteiro base. Para cen√°rios, adicione "wide angle, 16:9 aspect ratio". Para personagens isolados, adicione "plain white background".
Gere prompts para TODOS os elementos visuais distintos e importantes do roteiro base.`,

  'roteiro_livro': `
Sua tarefa √© adaptar o roteiro base fornecido para o formato de um Roteiro de Livro Ilustrado infantil de 'O Mundo de Dom'.
Siga ESTRITAMENTE O SEGUINTE FORMATO:
1.  **T√≠tulo:** (Opcional) Comece com "Livro 1 ‚Äì O Planeta Sem Cor (Roteiro ilustrado por p√°gina)".
2.  **Separador/Marcador de P√°gina:** Use o caractere "üü¶" numa linha pr√≥pria para indicar o in√≠cio de CADA nova p√°gina.
3.  **Cabe√ßalho de P√°gina:** Na linha IMEDIATAMENTE ABAIXO do separador "üü¶", escreva "P√°gina X" (onde X √© o n√∫mero da p√°gina, come√ßando em 1).
4.  **Texto da P√°gina:** Na linha(s) IMEDIATAMENTE ABAIXO do cabe√ßalho "P√°gina X", escreva o texto narrativo para essa p√°gina. O texto deve ser CURTO (1-3 frases simples), em 3¬™ pessoa, com tom leve e m√°gico. Di√°logos devem ser integrados de forma simples (ex: "Dom perguntou: ‚Äî Existe um planeta m√°gico?"). N√ÉO inclua sugest√µes visuais expl√≠citas, apenas o texto que aparecer√° na p√°gina do livro.
Divida TODA a hist√≥ria do roteiro base em p√°ginas curtas seguindo este formato.`,

  'roteiro_audiobook': `
Sua tarefa √© adaptar o texto (preferencialmente do Roteiro de Livro Ilustrado ou Roteiro Completo) para um Roteiro de Audiobook de 'O Mundo de Dom'.
Siga ESTRITAMENTE o formato:
- Mantenha o texto narrativo e os di√°logos originais.
- Insira marca√ß√µes claras entre colchetes "[]" ANTES da palavra ou frase a que se aplicam, para guiar o narrador de voz:
    - Entona√ß√µes: "[curioso]", "[empolgado]", "[sussurrando]", "[voz gentil]", "[rindo]".
    - Pausas: "[pausa curta]", "[pausa m√©dia]", "[pausa longa]".
    - Efeitos Sonoros (SFX): "[SFX: sino da escola toca suavemente]", "[SFX: foguete de papel√£o 'fwoosh']", "[SFX: som 'Blup!' fofo e aquoso]", "[SFX: miado gentil]".
    - M√∫sica (Sugest√£o): "[M√öSICA: tema principal suave ao fundo]", "[M√öSICA: tema de aventura diminui]".
    - Indica√ß√£o de Voz (se diferente do narrador principal): Use apenas se houver m√∫ltiplos narradores. Ex: "[VOZ PROFESSORA]". Para di√°logos normais, n√£o √© necess√°rio, pois o nome do personagem j√° indica quem fala no roteiro completo.
O objetivo √© criar um roteiro pronto para grava√ß√£o de √°udio profissional.`,
};

// Fun√ß√£o auxiliar para obter o prompt completo do sistema
function getSystemPrompt(moduleType: string): string {
  const templateInstructions = MODULE_TEMPLATES[moduleType];
  if (!templateInstructions) {
    throw new Error(`Template n√£o definido para o tipo de m√≥dulo: ${moduleType}`);
  }
  // Combina as regras GERAIS do universo com as instru√ß√µes ESPEC√çFICAS do template
  return `${DOM_UNIVERSE_RULES}\n\n**INSTRU√á√ïES ESPEC√çFICAS PARA ESTA TAREFA:**\n${templateInstructions}\n\n**REGRAS ADICIONAIS:**\n- Siga TODAS as regras e o formato ESTRITAMENTE.\n- Use linguagem apropriada para crian√ßas pr√©-escolares.\n- Seja criativo dentro das diretrizes, mas n√£o invente informa√ß√µes fora do roteiro base.\n- A sa√≠da deve conter APENAS o conte√∫do solicitado no formato especificado, sem coment√°rios adicionais ou introdu√ß√µes suas.`;
}

const corsHeaders = {
  "Access-Control-Allow-Origin": "*", // Restrinja em produ√ß√£o!
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

// --- L√≥gica Principal da Edge Function ---
serve(async (req: Request) => {
  // Responde a preflight requests (CORS)
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // 1. Configurar Supabase Client (com autentica√ß√£o do usu√°rio)
    // Assegura que as vari√°veis de ambiente est√£o definidas no Supabase Edge Runtime
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseAnonKey = Deno.env.get('SUPABASE_ANON_KEY');
    if (!supabaseUrl || !supabaseAnonKey) {
        console.error("Supabase URL or Anon Key not set in environment variables.");
        throw new Error("Configura√ß√£o interna do servidor incompleta.");
    }

    const supabaseClient = createClient(
      supabaseUrl,
      supabaseAnonKey,
      // Obt√©m o token JWT do header da requisi√ß√£o do frontend
      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
    );

    // 2. Verificar Autentica√ß√£o do Usu√°rio
    const { data: { user }, error: userError } = await supabaseClient.auth.getUser();
    if (userError || !user) {
      console.error('Generate Content - User Auth Error:', userError?.message || 'No user session');
      return new Response(JSON.stringify({ error: 'Acesso n√£o autorizado.' }), { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }
    console.log(`User ${user.id} authenticated.`);

    // 3. Validar Input da Requisi√ß√£o (Corpo JSON)
    const { episode_id, module_type } = await req.json();
    if (!episode_id || typeof episode_id !== 'string' || !module_type || typeof module_type !== 'string') {
      return new Response(JSON.stringify({ error: 'Par√¢metros inv√°lidos: episode_id (string) e module_type (string) s√£o obrigat√≥rios.' }), { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }
    // Verifica se o module_type √© um dos definidos nos templates
    if (!MODULE_TEMPLATES[module_type]) {
        console.warn(`Invalid module_type received: ${module_type}`);
        return new Response(JSON.stringify({ error: `Tipo de m√≥dulo inv√°lido fornecido: ${module_type}` }), { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }
    console.log(`Input validated: episode_id=${episode_id}, module_type=${module_type}`);

    // 4. Buscar Roteiro Base do Epis√≥dio (RLS garante a permiss√£o)
    console.log(`Workspaceing base script for episode ${episode_id}`);
    const { data: episodeData, error: episodeError } = await supabaseClient
      .from('episodes')
      .select('title, base_script') // Busca tamb√©m o t√≠tulo para usar no prompt
      .eq('id', episode_id)
      .single(); // Espera encontrar exatamente 1 ou 0 registos

    if (episodeError) {
        if (episodeError.code === 'PGRST116') { // C√≥digo para 'resource not found'
             console.error(`Episode ${episode_id} not found or user ${user.id} lacks permission.`);
             return new Response(JSON.stringify({ error: 'Epis√≥dio n√£o encontrado ou acesso negado.' }), { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
        } else {
            console.error('Generate Content - Episode Fetch DB Error:', episodeError);
            return new Response(JSON.stringify({ error: 'Erro ao buscar dados do epis√≥dio.' }), { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
        }
    }
    if (!episodeData || !episodeData.base_script) { // Verifica se base_script n√£o √© null/vazio
         console.error(`Episode ${episode_id} not found or base_script is missing.`);
         return new Response(JSON.stringify({ error: 'Roteiro base do epis√≥dio n√£o encontrado.' }), { status: 404, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }
    const baseScript = episodeData.base_script;
    const episodeTitle = episodeData.title || 'Epis√≥dio Sem T√≠tulo'; // Usa o t√≠tulo do epis√≥dio
    console.log(`Base script fetched successfully for episode ${episode_id}.`);

    // 5. Preparar e Chamar OpenAI API
    const openaiApiKey = Deno.env.get("OPENAI_API_KEY");
    if (!openaiApiKey) {
        console.error('CRITICAL: OPENAI_API_KEY secret not found!');
        return new Response(JSON.stringify({ error: 'Erro de configura√ß√£o interna do servidor (chave OpenAI ausente).' }), { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }
    // Inicializa o cliente OpenAI AQUI, dentro da fun√ß√£o, pois precisa da chave
    const openai = new OpenAI({ apiKey: openaiApiKey });

    // Constr√≥i os prompts dinamicamente
    const systemPrompt = getSystemPrompt(module_type); // Combina regras + template
    // O User Prompt agora s√≥ precisa do contexto principal
    const userPrompt = `T√≠tulo do Epis√≥dio: ${episodeTitle}\n\nRoteiro Base para Processar:\n---\n${baseScript}\n---`;

    console.log(`Calling OpenAI API for module: ${module_type}, episode: ${episode_id}...`);
    let generatedText = '';
    try {
        // Usa a sintaxe correta da v4 da biblioteca OpenAI
        const chatCompletion = await openai.chat.completions.create({
          messages: [
            { role: "system", content: systemPrompt },
            { role: "user", content: userPrompt },
          ],
          model: "gpt-4-turbo", // Modelo recomendado (verificar nome exato e disponibilidade)
          temperature: 0.35,     // Temperatura baixa para maior ader√™ncia ao template e regras
          max_tokens: 3800,     // Limite generoso; ajuste fino pode ser necess√°rio
          // top_p: 1, // Geralmente n√£o necess√°rio com baixa temperatura
          // frequency_penalty: 0, // Evitar penalidades que podem prejudicar a formata√ß√£o
          // presence_penalty: 0,
        });

        generatedText = chatCompletion.choices[0]?.message?.content?.trim() ?? '';

        if (!generatedText) {
            console.warn(`OpenAI returned empty content for module: ${module_type}, episode: ${episode_id}.`);
            throw new Error('A IA n√£o retornou conte√∫do. Tente novamente.');
        }
        console.log(`OpenAI call successful. Content length: ${generatedText.length}`);

    } catch (openaiError) {
        console.error(`OpenAI API Call Error for module ${module_type}, episode ${episode_id}:`, openaiError);
        let errorMessage = 'Falha ao comunicar com o servi√ßo de IA. Verifique sua chave OpenAI e tente novamente.';
        // Tenta extrair mensagens de erro espec√≠ficas da OpenAI
        if (openaiError?.status === 401) {
            errorMessage = 'Erro de autentica√ß√£o com a OpenAI. Verifique sua chave API.';
        } else if (openaiError?.status === 429) {
            errorMessage = 'Limite de requisi√ß√µes da OpenAI atingido. Tente novamente mais tarde.';
        } else if (openaiError?.error?.message) {
             errorMessage = `Erro da OpenAI: ${openaiError.error.message}`;
        } else if (openaiError instanceof Error) {
             errorMessage = `Erro OpenAI: ${openaiError.message}`;
        }
        // Retorna um erro 502 (Bad Gateway) para indicar falha na comunica√ß√£o com servi√ßo externo
        return new Response(JSON.stringify({ error: errorMessage }), { status: 502, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }

    // 6. Salvar Conte√∫do Gerado na Base de Dados (Usando Upsert)
    console.log(`Attempting to save generated content to DB for module: ${module_type}, episode: ${episode_id}`);
    const { data: savedContent, error: saveError } = await supabaseClient
      .from('generated_content')
      .upsert(
        {
          episode_id: episode_id,
          module_type: module_type,
          content: generatedText,
          // 'updated_at' √© atualizado automaticamente pelo Supabase em upsert/update
        },
        {
          onConflict: 'episode_id, module_type', // Nome da constraint UNIQUE (VERIFICAR PASSO 7 nas instru√ß√µes)
        }
      )
      .select('id, module_type, updated_at, content') // Retorna o conte√∫do salvo para o frontend
      .single();

    // Verifica se a constraint UNIQUE 'generated_content_episode_module_unique' existe!
    if (saveError) {
      console.error('Generate Content - Save Content DB Error:', saveError);
      // Verifica se o erro √© devido √† constraint ausente (c√≥digo espec√≠fico pode variar)
      if (saveError.message.includes("constraint") && saveError.message.includes("does not exist")) {
         return new Response(JSON.stringify({ error: 'Erro de configura√ß√£o da base de dados (constraint UNIQUE ausente). Contacte o administrador.' }), { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
      }
      return new Response(JSON.stringify({ error: 'Falha ao salvar o conte√∫do gerado na base de dados.' }), { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
    }
    console.log(`Generated content saved/updated successfully. Record ID: ${savedContent.id}`);

    // 7. Retornar Resposta de Sucesso para o Frontend (com o conte√∫do salvo)
    return new Response(JSON.stringify(savedContent), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200, // OK
    });

  } catch (error) {
    // Captura erros gerais n√£o tratados (ex: erro ao parsear JSON do request, erros inesperados)
    console.error('Generate Content - Uncaught General Error:', error);
    return new Response(JSON.stringify({ error: `Erro interno inesperado no servidor: ${error.message}` }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500, // Internal Server Error
    });
  }
}); // Fim da fun√ß√£o serve