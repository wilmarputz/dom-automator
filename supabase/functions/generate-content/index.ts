
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";

const TEMPLATES = {
  prompt_visual: `
Sua tarefa √© analisar o roteiro base e gerar Prompts de Cria√ß√£o EM INGL√äS para personagens e cen√°rios chave do epis√≥dio 'O Mundo de Dom', formatados para IA de imagem (estilo MidJourney).
Siga ESTRITAMENTE O SEGUINTE FORMATO:
1.  **T√≠tulo:** (Opcional) Comece com "Epis√≥dio X ‚Äì Nome do Epis√≥dio".
2.  **Categorias:** Organize os prompts em categorias l√≥gicas (ex: "Personagens", "Cen√°rios"). Pode usar um emoji opcional seguido pelo NOME DA CATEGORIA EM MAI√öSCULAS (ex: "üßí PERSONAGENS", "üåç CEN√ÅRIOS").
3.  **Itens dentro da Categoria:** Para cada item a ser gerado (personagem ou cen√°rio):
    * Use um emoji opcional relevante seguido pelo Nome do Item (ex: "üè´ Sala de Aula Infantil").
    * Na linha seguinte, escreva EXATAMENTE "Prompt (EN):".
    * Na linha seguinte, comece o texto do prompt DETALHADO em INGL√äS.
4.  **Conte√∫do do Prompt (EN):** O prompt em ingl√™s DEVE incluir:
    * Estilo base: "2D hand-drawn cartoon style".
    * P√∫blico/Detalhe: "preschool animation/cartoon", "simple proportions", "friendly", "cozy", "colorful" (a menos que o roteiro especifique aus√™ncia de cor, como no planeta cinza).
    * Detalhes espec√≠ficos do item (cores, roupas, ambiente, atmosfera) conforme descrito no roteiro base.
    * Para cen√°rios, adicione "16:9 composition".
    * Para personagens isolados, pode adicionar "White background" se apropriado.
Gere prompts para TODOS os elementos visuais distintos e importantes mencionados ou impl√≠citos no roteiro base.`,

  roteiro_completo: `
Sua tarefa √© converter o roteiro base fornecido em um Roteiro Completo de Epis√≥dio para 'O Mundo de Dom'.
Siga ESTRITAMENTE O SEGUINTE FORMATO:
1.  **T√≠tulo do Epis√≥dio:** (Opcional, pode omitir se j√° existir) Comece com "Epis√≥dio X: Nome do Epis√≥dio".
2.  **Cabe√ßalho de Cena:** Use "[Emoji Relevante] CENA X ‚Äì NOME DA CENA EM MAI√öSCULAS". Tente usar um emoji que corresponda ao local/contexto da cena (ex: üéì para escola, üè† para casa, üöÄ para espa√ßo). Se n√£o for √≥bvio, use um emoji gen√©rico ou omita. Deve haver uma linha em branco antes de cada cabe√ßalho de cena.
3.  **Narra√ß√£o:** Escreva "NARRADOR" em mai√∫sculas numa linha pr√≥pria. Na linha seguinte, comece o texto da narra√ß√£o.
4.  **Di√°logo:**
    * Escreva "NOME_DO_PERSONAGEM" em mai√∫sculas numa linha pr√≥pria.
    * Se houver uma indica√ß√£o de a√ß√£o ou tom, escreva-a entre par√™nteses "( )" na linha IMEDIATAMENTE ABAIXO do nome do personagem (ex: "(sorrindo)").
    * Na linha seguinte √† indica√ß√£o de a√ß√£o/tom (ou diretamente abaixo do nome do personagem se n√£o houver indica√ß√£o), comece o texto do di√°logo. Use "‚Äî" (travess√£o) no in√≠cio da fala, se apropriado.
5.  **A√ß√µes no Roteiro:** A√ß√µes importantes podem ser descritas na narra√ß√£o ou brevemente nas indica√ß√µes de a√ß√£o/tom. Sons podem ser mencionados na narra√ß√£o (ex: "Som de foguete subindo suavemente.").
6.  **Espa√ßamento:** Mantenha linhas em branco entre blocos (cena, narrador, personagem/di√°logo) para clareza, conforme o exemplo fornecido.
Adapte TODO o roteiro base para este formato detalhado.`,

  roteiro_cena: `
Sua tarefa √© converter o roteiro base em um Roteiro de Cenas (Shot List) para 'O Mundo de Dom', formatado para gera√ß√£o de imagens por IA.
Siga ESTRITAMENTE O SEGUINTE FORMATO:
1.  **T√≠tulo:** Comece com "PARTE X ‚Äì ROTEIRO DE CENAS (para gera√ß√£o de imagens com IA)".
2.  **Introdu√ß√£o:** Inclua um par√°grafo introdut√≥rio explicando o prop√≥sito (microcenas 3-5s, IA, etc.), como no exemplo.
3.  **Separador de Cena Principal:** Use o caractere "üîπ" numa linha pr√≥pria para separar os blocos de cada CENA principal.
4.  **Cabe√ßalho de Cena:** Abaixo do separador "üîπ", escreva "CENA X ‚Äì Nome da Cena em Mai√∫sculas".
5.  **Microcenas:** Liste as microcenas numeradas sequencialmente dentro de cada cena principal (ex: "1.1", "1.2", "2.1", etc.).
6.  **Descri√ß√£o da Microcena:** Ap√≥s o n√∫mero (ex: "1.1 "), escreva uma descri√ß√£o MUITO CONCISA da A√á√ÉO VISUAL principal dessa microcena. Foque no que deve ser visto (personagens, objetos, movimento, close-ups). Evite di√°logos, use apenas descri√ß√µes visuais. Exemplo: "1.1 Dom desenha estrelas no caderno (close)".
Adapte TODO o roteiro base para esta estrutura de shot list visual.`,

  roteiro_livro: `
Sua tarefa √© adaptar o roteiro base fornecido para o formato de um Roteiro de Livro Ilustrado infantil de 'O Mundo de Dom'.
Siga ESTRITAMENTE O SEGUINTE FORMATO:
1.  **T√≠tulo:** Comece com "Livro X ‚Äì Nome do Livro (Roteiro ilustrado por p√°gina)".
2.  **Separador/Marcador de P√°gina:** Use o caractere "üü¶" numa linha pr√≥pria para indicar o in√≠cio de CADA nova p√°gina.
3.  **Cabe√ßalho de P√°gina:** Na linha IMEDIATAMENTE ABAIXO do separador "üü¶", escreva "P√°gina X" (onde X √© o n√∫mero da p√°gina, come√ßando em 1).
4.  **Texto da P√°gina:** Na linha(s) IMEDIATAMENTE ABAIXO do cabe√ßalho "P√°gina X", escreva o texto narrativo para essa p√°gina. O texto deve ser CURTO, SIMPLES, em 3¬™ pessoa, com tom leve e m√°gico. Di√°logos devem ser integrados de forma simples (ex: "Dom sorriu:\n‚Äî Oi!"). N√ÉO inclua sugest√µes visuais expl√≠citas como "[SUGEST√ÉO VISUAL:]", apenas o texto narrativo da p√°gina.
Divida TODA a hist√≥ria do roteiro base em p√°ginas curtas seguindo este formato.`,

  roteiro_audiobook: `
Sua tarefa √© adaptar o texto (preferencialmente do Roteiro de Livro Ilustrado ou do Roteiro Completo, o que for mais apropriado como base a partir do roteiro original) para um Roteiro de Audiobook de 'O Mundo de Dom'.
Siga ESTRITAMENTE o formato:
- Mantenha o texto narrativo e os di√°logos.
- Insira marca√ß√µes claras entre colchetes "[]" para guiar o narrador de voz:
    - Entona√ß√µes: Ex: "[com curiosidade]", "[empolgado]", "[sussurrando]", "[tom gentil]".
    - Pausas: Ex: "[pausa curta]", "[pausa dram√°tica]", "[pausa longa]".
    - Efeitos Sonoros (SFX): Ex: "[efeito: sino da escola toca]", "[efeito: som suave 'fwoosh']", "[efeito: 'Blup!' fofo]", "[efeito: miado suave]".
    - M√∫sica (Sugest√£o): Ex: "[m√∫sica: tema de abertura suave entra e some]", "[m√∫sica: tema de aventura leve diminui]".
    - Vozes (se necess√°rio distinguir do narrador principal): Ex: "[voz: Professora]", "[voz: Dom]".
O objetivo √© criar um roteiro pronto para grava√ß√£o de √°udio, mantendo o tom m√°gico e infantil de 'O Mundo de Dom'.`,
};

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response("ok", { headers: corsHeaders });
  }

  try {
    const OPENAI_API_KEY = Deno.env.get("OPENAI_API_KEY");
    if (!OPENAI_API_KEY) {
      throw new Error("OPENAI_API_KEY is not set");
    }

    const { episodeId, moduleType, title, baseScript } = await req.json();

    if (!moduleType || !baseScript) {
      return new Response(
        JSON.stringify({
          error: "Missing required fields: moduleType and baseScript are required",
        }),
        {
          status: 400,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    // Get the template for the requested module type
    const template = TEMPLATES[moduleType as keyof typeof TEMPLATES];
    if (!template) {
      return new Response(
        JSON.stringify({
          error: `Invalid module type: ${moduleType}`,
        }),
        {
          status: 400,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    // Prepare context for the OpenAI request
    const context = `
T√≠tulo do Epis√≥dio: ${title || "Sem t√≠tulo"}
Roteiro Base:
${baseScript}

${template}
`;

    // Make the request to OpenAI API
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4o",  // Using GPT-4o for high quality output
        messages: [
          {
            role: "system",
            content: "Voc√™ √© um assistente especializado em roteiriza√ß√£o e produ√ß√£o de conte√∫do infantil educativo. Seu trabalho √© criar conte√∫do para o mundo de Dom, uma s√©rie infantil.",
          },
          {
            role: "user",
            content: context,
          },
        ],
        temperature: 0.7,
        max_tokens: 3000,
      }),
    });

    const openAIResponse = await response.json();
    
    if (openAIResponse.error) {
      console.error("OpenAI API error:", openAIResponse.error);
      return new Response(
        JSON.stringify({
          error: "Error from OpenAI API",
          details: openAIResponse.error,
        }),
        {
          status: 500,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    const generatedContent = openAIResponse.choices[0].message.content;

    return new Response(
      JSON.stringify({
        content: generatedContent,
        moduleType,
        episodeId,
      }),
      {
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  } catch (error) {
    console.error("Error in generate-content function:", error);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  }
});
